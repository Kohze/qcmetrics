%\VignetteEngine{knitr}
%\VignetteIndexEntry{The 'qcmetrics' infrastructure for quality control and reporting}
%\VignetteKeywords{Bioinformatics, Quality control, reporting}
%\VignettePackage{qcmetrics}

\documentclass[12pt,a4paper,english]{scrartcl}
\usepackage{amsmath,amsfonts,amssymb}
\usepackage{tikz}
\usepackage{hyperref}
\usepackage[authoryear,round]{natbib}
\usepackage[auth-sc]{authblk}
\usepackage{setspace}
\onehalfspacing

% caption formatting
\setcapindent{0em}
\setkomafont{captionlabel}{\sffamily\bfseries}
\setkomafont{caption}{\sffamily}

\renewcommand\Authands{ and }

\newcommand{\R}{\texttt{R} }
\newcommand{\code}[1]{{\texttt{#1}}}
\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\mbox{\normalfont\textsf{#1}}}}
\newcommand{\email}[1]{\href{mailto:#1}{\normalfont\texttt{#1}}}
%% colors
\definecolor{Red}{rgb}{0.7,0,0}
\definecolor{Blue}{rgb}{0,0,0.8}

\usepackage{geometry}
\geometry{verbose,
  tmargin = 2.5cm,
  bmargin = 2.5cm,
  lmargin = 3.0cm,
  rmargin = 3.0cm}

\usepackage{hyperref}
\usepackage{breakurl}
\hypersetup{%
  pdfusetitle,
  bookmarks = {true},
  bookmarksnumbered = {true},
  bookmarksopen = {true},
  bookmarksopenlevel = 2,
  unicode = {true},
  breaklinks = {false},
  hyperindex = {true},
  colorlinks = {true},
  linktocpage = {true},
  plainpages = {false},
  linkcolor = {Blue},
  citecolor = {Blue},
  urlcolor = {Red},
  pdfstartview = {Fit},
  pdfpagemode = {UseOutlines},
  pdfview = {XYZ null null null}
}


\author{
  Laurent Gatto\thanks{\email{lg390@cam.ac.uk}}
}


\affil{
  Computational Proteomics Unit\\
  Cambridge Center for Proteomics\\
  University of Cambridge
}

\begin{document}

\title{The \Rpackage{qcmetrics} infrastructure for quality control and automatic reporting}

\maketitle

%% Abstract and keywords %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\vskip 0.3in minus 0.1in
\hrule
\begin{abstract}

\end{abstract}
\textit{Keywords}: Bioinformatics, Quality control, reporting, visualisation 
\vskip 0.1in minus 0.05in
\hrule
\vskip 0.2in minus 0.1in
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage

\tableofcontents

<<env, include=FALSE, echo=FALSE, cache=FALSE>>=
library("knitr")
opts_chunk$set(fig.align = 'center', 
               fig.show = 'hold', 
               par = TRUE,
               prompt = TRUE,
               eval = TRUE,
               stop_on_error = 1L,
               comment = NA)
options(replace.assign = TRUE, 
        width = 55)

suppressPackageStartupMessages(library("qcmetrics"))
suppressPackageStartupMessages(library("MAQCsubsetAFX"))
suppressPackageStartupMessages(library("yaqcaffy"))
suppressPackageStartupMessages(library("affy"))
suppressPackageStartupMessages(library("AnnotationDbi"))
set.seed(1)
@ 
%%$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Section
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\section{Introduction}\label{sec:intro} 

Why QC is important. Need for standardisation and automation. Package is general framework. Below we demonstrate how to create QC objects, how to bundle them to create sets of QC metrics and how to generate reports in multiple formats. The goal is to provide means to develope QC pipeline and automate the generation of reports through wrapper QC functions \ref{sec:wrapper}. It is however hoped that the community will go a step further by developing and distributing fully fledged QC packages for dedicated applications \ref{sec:qcpkg}. Need for repository for QC packages.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Section
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{The QC classes}\label{sec:qcclasses}

The package provides are two types of QC containers. The \Robject{QcMetric} class stores data and visualisation functions for single metrics. Several such metrics can be bundles into a \Robject{QcMetrics} instances, that can be used as templates for automaated report generation. Below, we will provide a quick overview of how to create respective \Robject{QcMetric} and \Robject{QcMetrics} instances. More details are available in the respective documentations. 

\subsection{The \Robject{QcMetric} class}

A QC metric is composed of a description or name, some QC data, a status that defines of the metric is deemed of good quality (coded as \Robject{TRUE}), bad quality (coded as \Robject{FALSE}) or not yet evaluated (coded as \Robject{NA}). Finally, individual metrics can be displayed as a short textual summary or plotted, To do the former, one can use the default \Rfunction{show} method while the latter \Rfunction{plot} method will have to be specifically defined.

<<qcmetric>>=
library("qcmetrics")
qc <- QcMetric(name = "A test metric")
qcdata(qc, "x") <- rnorm(100)
qcdata(qc) ## all available qcdata
summary(qcdata(qc, "x")) ## get x
show(qc) ## or just qc
plot(qc) <- function(object, ... ) boxplot(qcdata(object, "x"), ...)
plot(qc)
status(qc) <- TRUE
qc
@

\subsection{The \Robject{QcMetrics} class}

A \Robject{QcMetrics} object is essentially just a list of individual \Robject{QcMetric} instances. It is also possible to set a list of metadata to describe the source of the QC metrics.

<<qcmetrics>>=
qcm <- QcMetrics(qcdata = list(qc))
qcm
metadata(qcm) <- list(metadata1 = 123,
                      metadata2 = "abc")
@

The \Robject{QcMetrics} can then be passed to the \Rfunction{qcReport} method to generate reports, as described in more details below. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Section
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Creating QC pipelines}\label{sec:pipeline}


\subsection{Microarray degradation}

We will use the \Robject{refA} Affymetrix arrays from the \Rpackage{MAQCsubsetAFX} package as an example data and investigate the RNA degradation using the \Rfunction{AffyRNAdeg} from \Rpackage{affy} and the actin and GAPDH $\frac{3'}{5'}$ ratios, as calculated in the \Rpackage{yaqcaffy} package. The first code chunk retrieves the data and computes the QC data.

<<maqcdata, cache = TRUE>>=
library("MAQCsubsetAFX")
data(refA)
library("affy")
deg <- AffyRNAdeg(refA)
library("yaqcaffy")
yqc <- yaqc(refA)
@

<<maqc1>>=
qc1 <- QcMetric(name = "Affy RNA degradation slopes")
qcdata(qc1, "deg") <- deg
plot(qc1) <- function(object, ...) {
    x <- qcdata(object, "deg")
    nms <- x$sample.names
    plotAffyRNAdeg(x, col = 1:length(nms), ...)
    legend("topleft", nms, lty = 1, cex = 0.8, 
           col = 1:length(nms), bty = "n")
}
status(qc1) <- TRUE
qc1
@


<<maqc2>>=
qc2 <- QcMetric(name = "Affy RNA degradation ratios")
qcdata(qc2, "yqc") <- yqc
plot(qc2) <- function(object, ...) {
    par(mfrow = c(1, 2))
    yaqcaffy:::.plotQCRatios(qcdata(object, "yqc"), "all", ...)
}
status(qc2) <- TRUE
qc2
@

<<maqcm>>=
maqcm <- QcMetrics(qcdata = list(qc1, qc2))
maqcm
@

%% Running this one with echoing so that the auxiliary files, 
%% in particular the figure directory does not get deleted, as 
%% it is also created and needed by the vignette itself.
<<maqcreport0, echo = FALSE, message = FALSE>>=
qcReport(maqcm, reportname = "rnadeg", clean = FALSE)
@

<<maqcreport, eval = FALSE>>=
qcReport(maqcm, reportname = "rnadeg")
@

%% include report with pdfpages
%% see http://tex.stackexchange.com/questions/105589/insert-pdf-in-latex

\subsection{A wrapper function}\label{sec:wrapper}

Once an appropriate set of quality metrics have been identified, the generation of the \Robject{QcMetrics} instances can be wrapped up for automation.

<<maqcwrap>>=
rnaqc <- function(input, status,
                  type, reportname = "rnadegradation") {
    if (is.character(input))
        input <- ReadAffy(input)
    ## first QC item
    qc1 <- QcMetric(name = "Affy RNA degradation slopes")
    qcdata(qc1, "deg") <- AffyRNAdeg(refA)
    plot(qc1) <- function(object, ...) {
        x <- qcdata(object, "deg")
        nms <- x$sample.names
        plotAffyRNAdeg(x, col = 1:length(nms), ...)
        legend("topleft", nms, lty = 1, cex = 0.8, 
               col = 1:length(nms), bty = "n")
    }
    if (!missing(status))
        status(qc1) <- status[1]
    ## second QC item
    qc2 <- QcMetric(name = "Affy RNA degradation ratios")
    qcdata(qc2, "yqc") <- yaqc(refA)
    plot(qc2) <- function(object, ...) {
        par(mfrow = c(1, 2))
        yaqcaffy:::.plotQCRatios(qcdata(object, "yqc"), "all", ...)
    }
    if (!missing(status))
        status(qc2) <- status[2]
    qcm <- QcMetrics(qcdata = list(qc1, qc2))
    if (!missing(type))         
        qcreport(qcm, reportname, type = type,
                 title = "Affymetrix RNA degradation report")
    invisible(qcm)
}
@


If is now possible to generate a report from a set of CEL files or firectly from an \Robject{affybatch} object. The \code{status} argument allows to directly set the statuses of the individual QC items. These can also be set later, as illustrated below. 

<<qcwrap2, cache = TRUE>>=
myqc <- rnaqc(refA)
status(myqc)
status(myqc) <- c(TRUE, TRUE)
@

<<test, echo = FALSE>>=
stopifnot(all.equal(myqc, maqcm))
@

The report can be generated manually with \code{qcReport(myqc)} or directly with the wrapper function as follows:

<<qcwrap3, eval = FALSE>>=
myqc <- rnaqc(refA, type = "pdf")
@

\subsection{Proteomics}

<<protdata, eval = FALSE>>=
library("RforProteomics")
library("mzR")
## ms <- getPXD000001mzXML()
msfile <- "~/Documents/Teaching/WTAC_ProteomicsBioinformatics-EBI/material/iTRAQ/iTRAQ_example_4415-5500.mzML"
ms <- openMSfile(ms)
hd <- header(ms)

exp <- readMSData(msfile)
@

<<protqc, eval = FALSE>>=
plot(basePeakIntensity ~ retentionTime, data = hd, type = "l")
## plot2d(exp, ...)
## plotDensity(exp, ...)
## p <- plotMzDelta(exp)
@ 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Section
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Report generation}\label{sec:report}

\subsection{Custom reports}

It is possible to customise reports for any of the existing types. The generation of the \texttt{pdf} report is based on a \texttt{tex} template \texttt{knitr-template.tex} that is available with the package\footnote{You can find its location with \Rfunction{system.file("templates", package = "qcmetrics")}.}. The \Rfunction{qcReport} method accepts the path to a custom \Robject{template} as argument. 

\paragraph{TODO} Similarly, \texttt{html} reports can be customised by providing a \texttt{css} definition as \Robject{template} argument when calling \Rfunction{qcReport}. 

It is also possible to generate the \texttt{tex} and \texttt{Rmd} (\R markdown) intermediates to the \texttt{pdf} and \texttt{html} outputs.

\subsection{New report types}

The existing report types are documented in the \Rfunction{qcReport} manual. Below, we will describe how to create new types, using as an example a simple plain text report. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Section
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{QC packages}\label{sec:qcpkg}



\clearpage

\singlespacing

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Section
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section*{Session information}\label{sec:sessionInfo} 

All software and respective versions used to produce this document are listed below.

<<sessioninfo, results='asis', echo=FALSE>>=
toLatex(sessionInfo())
@

% \bibliographystyle{plainnat}
% \bibliography{qcmetrics}

\end{document}

